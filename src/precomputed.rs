mod test {
    #[test]
    fn generate_knight_moves() {
        let mut moves = [0u64; 64];
        for i in 0..64 {
            let knights = 1 << i;
            let mut current_move = [0u64; 8];
            let not_a_file = 0x7F7F7F7F7F7F7F7Fu64;
            let not_b_file = 0xBFBFBFBFBFBFBFBFu64;
            let not_g_file = 0xFDFDFDFDFDFDFDFDu64;
            let not_h_file = 0xFEFEFEFEFEFEFEFEu64;
            let not_ab_file = not_a_file & not_b_file;
            let not_gh_file = not_g_file & not_h_file;
            current_move[0] = (knights << 17) & not_h_file;
            current_move[1] = (knights << 10) & not_gh_file;
            current_move[2] = (knights >> 6) & not_gh_file;
            current_move[3] = (knights >> 15) & not_h_file;
            current_move[7] = (knights << 15) & not_a_file;
            current_move[6] = (knights << 6) & not_ab_file;
            current_move[5] = (knights >> 10) & not_ab_file;
            current_move[4] = (knights >> 17) & not_a_file;
            moves[i] = current_move.iter().fold(0, |x, y| x | y);
        }
        print!("[");
        let mut first = true;
        for i in moves {
            if first == true {
                first = false;
            } else {
                print!(", ")
            }
            print!("0x{:016X}u64", i);
        }
        print!("]");
    }
    #[test]
    fn generate_king_moves() {
        let not_a_file = 0x7F7F7F7F7F7F7F7Fu64;
        let not_h_file = 0xFEFEFEFEFEFEFEFEu64;
        let mut moves = [0u64; 64];
        for i in 0..64 {
            let king = 1 << i;
            moves[i] = ((king << 9 | king << 1 | king >> 7) & not_h_file)
                | king << 8
                | ((king << 7 | king >> 1 | king >> 9) & not_a_file)
                | king >> 8;
        }
        print!("[");
        let mut first = true;
        for i in moves {
            if first == true {
                first = false;
            } else {
                print!(", ")
            }
            print!("0x{:016X}u64", i);
        }
        print!("]");
    }
    #[test]
    fn generate_rook_mask() {
        let mut mask = [0u64; 64];
        let mut file_mask = [0u64; 8];
        let mut rank_mask = [0u64; 8];
        for i in 0..8 {
            file_mask[i] = 0x0101010101010101u64 << i;
            rank_mask[i] = 0xFFu64 << i * 8;
        }
        print!("[");
        let mut first = true;
        for i in 0..64 {
            mask[i] = (file_mask[i % 8] | rank_mask[i / 8]) & !1 << i;
            if first == true {
                first = false;
            } else {
                print!(", ")
            }
            print!("0x{:016X}u64", i);
            //for j in 0..=7u8 {
            //    let row = (moves[i] >> (56 - (j * 8))) as u8;
            //    println!("{:08b}", row);
            //}
            //println!("");
            //std::thread::sleep(std::time::Duration::from_millis(500));
        }
        print!("]");
    }
    #[test]
    fn generate_bishop_mask() {

    }
}

pub static knight_moves: [u64; 64] = [
    0x0000000000020400u64,
    0x0000000000050800u64,
    0x00000000000A1100u64,
    0x0000000000142200u64,
    0x0000000000284400u64,
    0x0000000000508800u64,
    0x0000000000A01000u64,
    0x0000000000402000u64,
    0x0000000002040004u64,
    0x0000000005080008u64,
    0x000000000A110011u64,
    0x0000000014220022u64,
    0x0000000028440044u64,
    0x0000000050880088u64,
    0x00000000A0100010u64,
    0x0000000040200020u64,
    0x0000000204000402u64,
    0x0000000508000805u64,
    0x0000000A1100110Au64,
    0x0000001422002214u64,
    0x0000002844004428u64,
    0x0000005088008850u64,
    0x000000A0100010A0u64,
    0x0000004020002040u64,
    0x0000020400040200u64,
    0x0000050800080500u64,
    0x00000A1100110A00u64,
    0x0000142200221400u64,
    0x0000284400442800u64,
    0x0000508800885000u64,
    0x0000A0100010A000u64,
    0x0000402000204000u64,
    0x0002040004020000u64,
    0x0005080008050000u64,
    0x000A1100110A0000u64,
    0x0014220022140000u64,
    0x0028440044280000u64,
    0x0050880088500000u64,
    0x00A0100010A00000u64,
    0x0040200020400000u64,
    0x0204000402000000u64,
    0x0508000805000000u64,
    0x0A1100110A000000u64,
    0x1422002214000000u64,
    0x2844004428000000u64,
    0x5088008850000000u64,
    0xA0100010A0000000u64,
    0x4020002040000000u64,
    0x0400040200000000u64,
    0x0800080500000000u64,
    0x1100110A00000000u64,
    0x2200221400000000u64,
    0x4400442800000000u64,
    0x8800885000000000u64,
    0x100010A000000000u64,
    0x2000204000000000u64,
    0x0004020000000000u64,
    0x0008050000000000u64,
    0x00110A0000000000u64,
    0x0022140000000000u64,
    0x0044280000000000u64,
    0x0088500000000000u64,
    0x0010A00000000000u64,
    0x0020400000000000u64,
];
pub static king_moves: [u64; 64] = [
    0x0000000000000302u64,
    0x0000000000000705u64,
    0x0000000000000E0Au64,
    0x0000000000001C14u64,
    0x0000000000003828u64,
    0x0000000000007050u64,
    0x000000000000E0A0u64,
    0x000000000000C040u64,
    0x0000000000030203u64,
    0x0000000000070507u64,
    0x00000000000E0A0Eu64,
    0x00000000001C141Cu64,
    0x0000000000382838u64,
    0x0000000000705070u64,
    0x0000000000E0A0E0u64,
    0x0000000000C040C0u64,
    0x0000000003020300u64,
    0x0000000007050700u64,
    0x000000000E0A0E00u64,
    0x000000001C141C00u64,
    0x0000000038283800u64,
    0x0000000070507000u64,
    0x00000000E0A0E000u64,
    0x00000000C040C000u64,
    0x0000000302030000u64,
    0x0000000705070000u64,
    0x0000000E0A0E0000u64,
    0x0000001C141C0000u64,
    0x0000003828380000u64,
    0x0000007050700000u64,
    0x000000E0A0E00000u64,
    0x000000C040C00000u64,
    0x0000030203000000u64,
    0x0000070507000000u64,
    0x00000E0A0E000000u64,
    0x00001C141C000000u64,
    0x0000382838000000u64,
    0x0000705070000000u64,
    0x0000E0A0E0000000u64,
    0x0000C040C0000000u64,
    0x0003020300000000u64,
    0x0007050700000000u64,
    0x000E0A0E00000000u64,
    0x001C141C00000000u64,
    0x0038283800000000u64,
    0x0070507000000000u64,
    0x00E0A0E000000000u64,
    0x00C040C000000000u64,
    0x0302030000000000u64,
    0x0705070000000000u64,
    0x0E0A0E0000000000u64,
    0x1C141C0000000000u64,
    0x3828380000000000u64,
    0x7050700000000000u64,
    0xE0A0E00000000000u64,
    0xC040C00000000000u64,
    0x0203000000000000u64,
    0x0507000000000000u64,
    0x0A0E000000000000u64,
    0x141C000000000000u64,
    0x2838000000000000u64,
    0x5070000000000000u64,
    0xA0E0000000000000u64,
    0x40C0000000000000u64,
];

static blank_rook_moves: [u64; 64] = [
    0x0000000000000000u64,
    0x0000000000000001u64,
    0x0000000000000002u64,
    0x0000000000000003u64,
    0x0000000000000004u64,
    0x0000000000000005u64,
    0x0000000000000006u64,
    0x0000000000000007u64,
    0x0000000000000008u64,
    0x0000000000000009u64,
    0x000000000000000Au64,
    0x000000000000000Bu64,
    0x000000000000000Cu64,
    0x000000000000000Du64,
    0x000000000000000Eu64,
    0x000000000000000Fu64,
    0x0000000000000010u64,
    0x0000000000000011u64,
    0x0000000000000012u64,
    0x0000000000000013u64,
    0x0000000000000014u64,
    0x0000000000000015u64,
    0x0000000000000016u64,
    0x0000000000000017u64,
    0x0000000000000018u64,
    0x0000000000000019u64,
    0x000000000000001Au64,
    0x000000000000001Bu64,
    0x000000000000001Cu64,
    0x000000000000001Du64,
    0x000000000000001Eu64,
    0x000000000000001Fu64,
    0x0000000000000020u64,
    0x0000000000000021u64,
    0x0000000000000022u64,
    0x0000000000000023u64,
    0x0000000000000024u64,
    0x0000000000000025u64,
    0x0000000000000026u64,
    0x0000000000000027u64,
    0x0000000000000028u64,
    0x0000000000000029u64,
    0x000000000000002Au64,
    0x000000000000002Bu64,
    0x000000000000002Cu64,
    0x000000000000002Du64,
    0x000000000000002Eu64,
    0x000000000000002Fu64,
    0x0000000000000030u64,
    0x0000000000000031u64,
    0x0000000000000032u64,
    0x0000000000000033u64,
    0x0000000000000034u64,
    0x0000000000000035u64,
    0x0000000000000036u64,
    0x0000000000000037u64,
    0x0000000000000038u64,
    0x0000000000000039u64,
    0x000000000000003Au64,
    0x000000000000003Bu64,
    0x000000000000003Cu64,
    0x000000000000003Du64,
    0x000000000000003Eu64,
    0x000000000000003Fu64,
];
